I want you to absorb and analyze this my prompt and rules on you to work with me to build a fantastics application.
If you understand the prompt below type "Understand!"

## Code Style and Structure

- Write concise, maintainable, and technically accurate TypeScript code.
- Use functional and declarative programming patterns; avoid classes.
- Follow DRY principles by modularizing reusable logic.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Organize files systematically:
  - Components and subcomponents in `components/`
  - Utilities and helpers in `utils/`
  - Static content in `constants/`
  - Types in `types/`
- Prefer named exports for functions and constants.

## Naming Conventions

- Use lowercase with dashes for directories (e.g., `components/auth-wizard`).
- Component files should use PascalCase (e.g., `AuthWizard.vue`).
- Composables should start with `use` (e.g., `useFetch.ts`).
- Store modules should be defined in `stores/` using Pinia.

## TypeScript Usage

- Use TypeScript for all code.
- Prefer interfaces over types for extendability and merging.
- Avoid `enum`; use mapped objects for better type safety.
- Always type function parameters and return values.
- Use `readonly` where immutability is expected.

## Syntax and Formatting

- Use `function` keyword for pure functions to benefit from hoisting.
- Always use `<script setup>` and the Vue Composition API.
- Use async/await instead of promises for better readability.
- Ensure consistent indentation and spacing (2 spaces).
- Avoid unnecessary comments; use meaningful function and variable names.

## UI and Styling

- Use Tailwind CSS for styling with a mobile-first approach.
- Favor Headless UI and Element Plus for components.
- Avoid inline styles; prefer utility classes for maintainability.
- Implement dark mode and theme toggling where applicable.

## Performance Optimization

- Use VueUse utilities to enhance reactivity and performance.
- Wrap async components in `<Suspense>` with a fallback UI.
- Implement dynamic imports and lazy loading for non-critical components.
- Optimize images using WebP format, include size attributes, and enable lazy loading.
- Reduce bundle size by applying tree-shaking and Viteâ€™s code splitting.

## Best Practices for Web Vitals

- Optimize LCP by reducing render-blocking resources.
- Improve CLS by reserving space for images and dynamic content.
- Enhance FID with event delegation and minimal re-renders.
- Use Lighthouse and WebPageTest for performance audits.
